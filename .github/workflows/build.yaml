name: build-release-binary

run-name: Create Github Release for GoLang binary

on:
  push:
    tags:
    - 'r*'

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
    - name: Dump env
      run: env | sort

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: main

    - name: setup Go Lang
      uses: actions/setup-go@v3
      with:
        go-version: '^1.19.2'

    - name: Build for macOS, Windows, and Linux
      run: |
        set -e
        echo "Building for multiple platforms..."
        cd ./cmd/httping/
        mkdir -p builds

        # If go.mod doesn't exist
        if [ ! -f go.mod ]; then
          go mod init ${GITHUB_REPOSITORY}
        fi
        go mod tidy

        PLATFORMS=("linux/amd64" "windows/amd64" "darwin/amd64" "darwin/arm64")
        for PLATFORM in "${PLATFORMS[@]}"
        do
          IFS="/" read -r GOOS GOARCH <<< "$PLATFORM"
          EXT=""
          if [ "$GOOS" = "windows" ]; then
            EXT=".exe"
          fi
          OUTPUT="builds/httping-${GOOS}-${GOARCH}${EXT}"
          echo "Building $OUTPUT"
          env GOOS=$GOOS GOARCH=$GOARCH go build -o "$OUTPUT" -ldflags "-X main.Version=${GITHUB_REF_NAME} -X main.BuiltBy=github-actions" main.go
        done

        ls -lisa builds/

    - name: go test
      run: |
        go test -v
        cd ./cmd/httping/
        go test -v

    - run: git version
    - run: git branch
    - run: git tag

    - name: get semantic tag version and release notes from commit messages
      id: tag
      run: |
        currentTag=${GITHUB_REF_NAME}
        major_minor=$(echo "$currentTag" | cut -d'.' -f1-2)
        patch=$(echo "$currentTag" | cut -d'.' -f3)
        [ -n "$patch" ] && ((patch--)) || patch=".x"
        previousTag="${major_minor}.${patch}"

        echo "" > body.log
        if git tag | grep $previousTag ; then
          git log -q ${currentTag}...${previousTag} --pretty="- %s" -q --no-color >> body.log
        else
          git log --pretty="- %s" -q --no-color >> body.log
        fi

        echo "currentTag=$currentTag" >> $GITHUB_OUTPUT
        echo "previousTag=$previousTag" >> $GITHUB_OUTPUT
        echo "line_count=$(cat body.log | wc -l)" >> $GITHUB_OUTPUT

    - run: echo currentTag is ${{ steps.tag.outputs.currentTag }}
    - run: echo previousTag is ${{ steps.tag.outputs.previousTag }}
    - run: echo line_count is ${{ steps.tag.outputs.line_count }}
    - run: cat body.log

    - uses: ncipollo/release-action@v1
      with:
        name: ${{ env.GITHUB_REF_NAME }}
        tag: ${{ env.GITHUB_REF_NAME }}
        artifacts: ./cmd/httping/builds/httping*
        bodyFile: "body.log"
        token: ${{ secrets.GITHUB_TOKEN }}
        removeArtifacts: true
        allowUpdates: "true"
